# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2019 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.349
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from deepsecurity.api_client import ApiClient


class RegistryScannersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_registry_scanner(self, registry_scanner, api_version, **kwargs):  # noqa: E501
        """Create a Registry Scanner  # noqa: E501

        Create a new registry scanner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registry_scanner(registry_scanner, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegistryScanner registry_scanner: The registry scanner to create. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_registry_scanner_with_http_info(registry_scanner, api_version, **kwargs)  # noqa: E501
        else:
            (data) = self.create_registry_scanner_with_http_info(registry_scanner, api_version, **kwargs)  # noqa: E501
            return data

    def create_registry_scanner_with_http_info(self, registry_scanner, api_version, **kwargs):  # noqa: E501
        """Create a Registry Scanner  # noqa: E501

        Create a new registry scanner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_registry_scanner_with_http_info(registry_scanner, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RegistryScanner registry_scanner: The registry scanner to create. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_scanner', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_registry_scanner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_scanner' is set
        if ('registry_scanner' not in params or
                params['registry_scanner'] is None):
            raise ValueError("Missing the required parameter `registry_scanner` when calling `create_registry_scanner`")  # noqa: E501
        # verify the required parameter 'api_version' is set
        if ('api_version' not in params or
                params['api_version'] is None):
            raise ValueError("Missing the required parameter `api_version` when calling `create_registry_scanner`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_version' in params:
            header_params['api-version'] = params['api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry_scanner' in params:
            body_params = params['registry_scanner']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['DefaultAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/registryscanners', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistryScanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_registry_scanner(self, registry_scanner_id, api_version, **kwargs):  # noqa: E501
        """Delete a Registry Scanner  # noqa: E501

        Delete a registry scanner by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registry_scanner(registry_scanner_id, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to delete. (required)
        :param str api_version: The version of the api being called. (required)
        :param bool force: Force delete the registry scanner without unregistering the webhook from the scanner.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_registry_scanner_with_http_info(registry_scanner_id, api_version, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_registry_scanner_with_http_info(registry_scanner_id, api_version, **kwargs)  # noqa: E501
            return data

    def delete_registry_scanner_with_http_info(self, registry_scanner_id, api_version, **kwargs):  # noqa: E501
        """Delete a Registry Scanner  # noqa: E501

        Delete a registry scanner by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registry_scanner_with_http_info(registry_scanner_id, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to delete. (required)
        :param str api_version: The version of the api being called. (required)
        :param bool force: Force delete the registry scanner without unregistering the webhook from the scanner.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_scanner_id', 'api_version', 'force']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registry_scanner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_scanner_id' is set
        if ('registry_scanner_id' not in params or
                params['registry_scanner_id'] is None):
            raise ValueError("Missing the required parameter `registry_scanner_id` when calling `delete_registry_scanner`")  # noqa: E501
        # verify the required parameter 'api_version' is set
        if ('api_version' not in params or
                params['api_version'] is None):
            raise ValueError("Missing the required parameter `api_version` when calling `delete_registry_scanner`")  # noqa: E501

        if 'registry_scanner_id' in params and not re.search('\\d+', str(params['registry_scanner_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `registry_scanner_id` when calling `delete_registry_scanner`, must conform to the pattern `/\\d+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'registry_scanner_id' in params:
            path_params['registryScannerID'] = params['registry_scanner_id']  # noqa: E501

        query_params = []
        if 'force' in params:
            query_params.append(('force', params['force']))  # noqa: E501

        header_params = {}
        if 'api_version' in params:
            header_params['api-version'] = params['api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['DefaultAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/registryscanners/{registryScannerID}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def describe_registry_scanner(self, registry_scanner_id, api_version, **kwargs):  # noqa: E501
        """Describe a Registry Scanner  # noqa: E501

        Describe a registry scanner by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_registry_scanner(registry_scanner_id, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to describe. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.describe_registry_scanner_with_http_info(registry_scanner_id, api_version, **kwargs)  # noqa: E501
        else:
            (data) = self.describe_registry_scanner_with_http_info(registry_scanner_id, api_version, **kwargs)  # noqa: E501
            return data

    def describe_registry_scanner_with_http_info(self, registry_scanner_id, api_version, **kwargs):  # noqa: E501
        """Describe a Registry Scanner  # noqa: E501

        Describe a registry scanner by ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.describe_registry_scanner_with_http_info(registry_scanner_id, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to describe. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_scanner_id', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method describe_registry_scanner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_scanner_id' is set
        if ('registry_scanner_id' not in params or
                params['registry_scanner_id'] is None):
            raise ValueError("Missing the required parameter `registry_scanner_id` when calling `describe_registry_scanner`")  # noqa: E501
        # verify the required parameter 'api_version' is set
        if ('api_version' not in params or
                params['api_version'] is None):
            raise ValueError("Missing the required parameter `api_version` when calling `describe_registry_scanner`")  # noqa: E501

        if 'registry_scanner_id' in params and not re.search('\\d+', str(params['registry_scanner_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `registry_scanner_id` when calling `describe_registry_scanner`, must conform to the pattern `/\\d+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'registry_scanner_id' in params:
            path_params['registryScannerID'] = params['registry_scanner_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_version' in params:
            header_params['api-version'] = params['api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['DefaultAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/registryscanners/{registryScannerID}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistryScanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_registry_scanners(self, api_version, **kwargs):  # noqa: E501
        """List Registry Scanners  # noqa: E501

        Lists all registry scanners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_registry_scanners(api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanners
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_registry_scanners_with_http_info(api_version, **kwargs)  # noqa: E501
        else:
            (data) = self.list_registry_scanners_with_http_info(api_version, **kwargs)  # noqa: E501
            return data

    def list_registry_scanners_with_http_info(self, api_version, **kwargs):  # noqa: E501
        """List Registry Scanners  # noqa: E501

        Lists all registry scanners.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_registry_scanners_with_http_info(api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanners
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_registry_scanners" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'api_version' is set
        if ('api_version' not in params or
                params['api_version'] is None):
            raise ValueError("Missing the required parameter `api_version` when calling `list_registry_scanners`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'api_version' in params:
            header_params['api-version'] = params['api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['DefaultAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/registryscanners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistryScanners',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def modify_registry_scanner(self, registry_scanner_id, registry_scanner, api_version, **kwargs):  # noqa: E501
        """Modify a Registry Scanner  # noqa: E501

        Modify a registry scanner by ID. Any unset elements are not changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_registry_scanner(registry_scanner_id, registry_scanner, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to modify. (required)
        :param RegistryScanner registry_scanner: The settings of the registry scanner to modify. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.modify_registry_scanner_with_http_info(registry_scanner_id, registry_scanner, api_version, **kwargs)  # noqa: E501
        else:
            (data) = self.modify_registry_scanner_with_http_info(registry_scanner_id, registry_scanner, api_version, **kwargs)  # noqa: E501
            return data

    def modify_registry_scanner_with_http_info(self, registry_scanner_id, registry_scanner, api_version, **kwargs):  # noqa: E501
        """Modify a Registry Scanner  # noqa: E501

        Modify a registry scanner by ID. Any unset elements are not changed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.modify_registry_scanner_with_http_info(registry_scanner_id, registry_scanner, api_version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int registry_scanner_id: The ID number of the registry scanner to modify. (required)
        :param RegistryScanner registry_scanner: The settings of the registry scanner to modify. (required)
        :param str api_version: The version of the api being called. (required)
        :return: RegistryScanner
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry_scanner_id', 'registry_scanner', 'api_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_registry_scanner" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry_scanner_id' is set
        if ('registry_scanner_id' not in params or
                params['registry_scanner_id'] is None):
            raise ValueError("Missing the required parameter `registry_scanner_id` when calling `modify_registry_scanner`")  # noqa: E501
        # verify the required parameter 'registry_scanner' is set
        if ('registry_scanner' not in params or
                params['registry_scanner'] is None):
            raise ValueError("Missing the required parameter `registry_scanner` when calling `modify_registry_scanner`")  # noqa: E501
        # verify the required parameter 'api_version' is set
        if ('api_version' not in params or
                params['api_version'] is None):
            raise ValueError("Missing the required parameter `api_version` when calling `modify_registry_scanner`")  # noqa: E501

        if 'registry_scanner_id' in params and not re.search('\\d+', str(params['registry_scanner_id'])):  # noqa: E501
            raise ValueError("Invalid value for parameter `registry_scanner_id` when calling `modify_registry_scanner`, must conform to the pattern `/\\d+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'registry_scanner_id' in params:
            path_params['registryScannerID'] = params['registry_scanner_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'api_version' in params:
            header_params['api-version'] = params['api_version']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'registry_scanner' in params:
            body_params = params['registry_scanner']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['DefaultAuthentication']  # noqa: E501

        return self.api_client.call_api(
            '/registryscanners/{registryScannerID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RegistryScanner',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
