# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2019 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.349
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from deepsecurity.models.container_control_vulnerability_threshold import ContainerControlVulnerabilityThreshold  # noqa: F401,E501
from deepsecurity.models.policy_module_status import PolicyModuleStatus  # noqa: F401,E501


class ContainerControlPolicyExtension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'state': 'str',
        'module_status': 'PolicyModuleStatus',
        'unscanned_images_action': 'str',
        'vulnerability_exceed_threshold_action': 'str',
        'vulnerability_threshold': 'ContainerControlVulnerabilityThreshold',
        'malware_detected_action': 'str',
        'privileged_container_action': 'str'
    }

    attribute_map = {
        'state': 'state',
        'module_status': 'moduleStatus',
        'unscanned_images_action': 'unscannedImagesAction',
        'vulnerability_exceed_threshold_action': 'vulnerabilityExceedThresholdAction',
        'vulnerability_threshold': 'vulnerabilityThreshold',
        'malware_detected_action': 'malwareDetectedAction',
        'privileged_container_action': 'privilegedContainerAction'
    }

    def __init__(self, state=None, module_status=None, unscanned_images_action=None, vulnerability_exceed_threshold_action=None, vulnerability_threshold=None, malware_detected_action=None, privileged_container_action=None):  # noqa: E501
        """ContainerControlPolicyExtension - a model defined in Swagger"""  # noqa: E501

        self._state = None
        self._module_status = None
        self._unscanned_images_action = None
        self._vulnerability_exceed_threshold_action = None
        self._vulnerability_threshold = None
        self._malware_detected_action = None
        self._privileged_container_action = None
        self.discriminator = None

        if state is not None:
            self.state = state
        if module_status is not None:
            self.module_status = module_status
        if unscanned_images_action is not None:
            self.unscanned_images_action = unscanned_images_action
        if vulnerability_exceed_threshold_action is not None:
            self.vulnerability_exceed_threshold_action = vulnerability_exceed_threshold_action
        if vulnerability_threshold is not None:
            self.vulnerability_threshold = vulnerability_threshold
        if malware_detected_action is not None:
            self.malware_detected_action = malware_detected_action
        if privileged_container_action is not None:
            self.privileged_container_action = privileged_container_action

    @property
    def state(self):
        """Gets the state of this ContainerControlPolicyExtension.  # noqa: E501

        Module running state.  # noqa: E501

        :return: The state of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContainerControlPolicyExtension.

        Module running state.  # noqa: E501

        :param state: The state of this ContainerControlPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["inherited", "on", "off"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def module_status(self):
        """Gets the module_status of this ContainerControlPolicyExtension.  # noqa: E501


        :return: The module_status of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: PolicyModuleStatus
        """
        return self._module_status

    @module_status.setter
    def module_status(self, module_status):
        """Sets the module_status of this ContainerControlPolicyExtension.


        :param module_status: The module_status of this ContainerControlPolicyExtension.  # noqa: E501
        :type: PolicyModuleStatus
        """

        self._module_status = module_status

    @property
    def unscanned_images_action(self):
        """Gets the unscanned_images_action of this ContainerControlPolicyExtension.  # noqa: E501

        The action to take for images that have not been scanned.  # noqa: E501

        :return: The unscanned_images_action of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._unscanned_images_action

    @unscanned_images_action.setter
    def unscanned_images_action(self, unscanned_images_action):
        """Sets the unscanned_images_action of this ContainerControlPolicyExtension.

        The action to take for images that have not been scanned.  # noqa: E501

        :param unscanned_images_action: The unscanned_images_action of this ContainerControlPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["detect", "block", "allow"]  # noqa: E501
        if unscanned_images_action not in allowed_values:
            raise ValueError(
                "Invalid value for `unscanned_images_action` ({0}), must be one of {1}"  # noqa: E501
                .format(unscanned_images_action, allowed_values)
            )

        self._unscanned_images_action = unscanned_images_action

    @property
    def vulnerability_exceed_threshold_action(self):
        """Gets the vulnerability_exceed_threshold_action of this ContainerControlPolicyExtension.  # noqa: E501

        Action to take when scanned vulnerabilities in Docker images exceed the threshold.  # noqa: E501

        :return: The vulnerability_exceed_threshold_action of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._vulnerability_exceed_threshold_action

    @vulnerability_exceed_threshold_action.setter
    def vulnerability_exceed_threshold_action(self, vulnerability_exceed_threshold_action):
        """Sets the vulnerability_exceed_threshold_action of this ContainerControlPolicyExtension.

        Action to take when scanned vulnerabilities in Docker images exceed the threshold.  # noqa: E501

        :param vulnerability_exceed_threshold_action: The vulnerability_exceed_threshold_action of this ContainerControlPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["detect", "block", "allow"]  # noqa: E501
        if vulnerability_exceed_threshold_action not in allowed_values:
            raise ValueError(
                "Invalid value for `vulnerability_exceed_threshold_action` ({0}), must be one of {1}"  # noqa: E501
                .format(vulnerability_exceed_threshold_action, allowed_values)
            )

        self._vulnerability_exceed_threshold_action = vulnerability_exceed_threshold_action

    @property
    def vulnerability_threshold(self):
        """Gets the vulnerability_threshold of this ContainerControlPolicyExtension.  # noqa: E501

        The setting about vulnerability exceed threshold.  # noqa: E501

        :return: The vulnerability_threshold of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: ContainerControlVulnerabilityThreshold
        """
        return self._vulnerability_threshold

    @vulnerability_threshold.setter
    def vulnerability_threshold(self, vulnerability_threshold):
        """Sets the vulnerability_threshold of this ContainerControlPolicyExtension.

        The setting about vulnerability exceed threshold.  # noqa: E501

        :param vulnerability_threshold: The vulnerability_threshold of this ContainerControlPolicyExtension.  # noqa: E501
        :type: ContainerControlVulnerabilityThreshold
        """

        self._vulnerability_threshold = vulnerability_threshold

    @property
    def malware_detected_action(self):
        """Gets the malware_detected_action of this ContainerControlPolicyExtension.  # noqa: E501

        Action to take when malware is found in Docker images.  # noqa: E501

        :return: The malware_detected_action of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._malware_detected_action

    @malware_detected_action.setter
    def malware_detected_action(self, malware_detected_action):
        """Sets the malware_detected_action of this ContainerControlPolicyExtension.

        Action to take when malware is found in Docker images.  # noqa: E501

        :param malware_detected_action: The malware_detected_action of this ContainerControlPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["detect", "block"]  # noqa: E501
        if malware_detected_action not in allowed_values:
            raise ValueError(
                "Invalid value for `malware_detected_action` ({0}), must be one of {1}"  # noqa: E501
                .format(malware_detected_action, allowed_values)
            )

        self._malware_detected_action = malware_detected_action

    @property
    def privileged_container_action(self):
        """Gets the privileged_container_action of this ContainerControlPolicyExtension.  # noqa: E501

        Action to take when a privileged container is created.  # noqa: E501

        :return: The privileged_container_action of this ContainerControlPolicyExtension.  # noqa: E501
        :rtype: str
        """
        return self._privileged_container_action

    @privileged_container_action.setter
    def privileged_container_action(self, privileged_container_action):
        """Sets the privileged_container_action of this ContainerControlPolicyExtension.

        Action to take when a privileged container is created.  # noqa: E501

        :param privileged_container_action: The privileged_container_action of this ContainerControlPolicyExtension.  # noqa: E501
        :type: str
        """
        allowed_values = ["detect", "block"]  # noqa: E501
        if privileged_container_action not in allowed_values:
            raise ValueError(
                "Invalid value for `privileged_container_action` ({0}), must be one of {1}"  # noqa: E501
                .format(privileged_container_action, allowed_values)
            )

        self._privileged_container_action = privileged_container_action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerControlPolicyExtension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerControlPolicyExtension):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

