# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2019 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.349
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ContainerControlVulnerabilityThreshold(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'critical_count': 'int',
        'defcon1_count': 'int',
        'high_count': 'int',
        'medium_count': 'int',
        'low_count': 'int',
        'negligible_count': 'int',
        'unknown_count': 'int'
    }

    attribute_map = {
        'critical_count': 'criticalCount',
        'defcon1_count': 'defcon1Count',
        'high_count': 'highCount',
        'medium_count': 'mediumCount',
        'low_count': 'lowCount',
        'negligible_count': 'negligibleCount',
        'unknown_count': 'unknownCount'
    }

    def __init__(self, critical_count=None, defcon1_count=None, high_count=None, medium_count=None, low_count=None, negligible_count=None, unknown_count=None):  # noqa: E501
        """ContainerControlVulnerabilityThreshold - a model defined in Swagger"""  # noqa: E501

        self._critical_count = None
        self._defcon1_count = None
        self._high_count = None
        self._medium_count = None
        self._low_count = None
        self._negligible_count = None
        self._unknown_count = None
        self.discriminator = None

        if critical_count is not None:
            self.critical_count = critical_count
        if defcon1_count is not None:
            self.defcon1_count = defcon1_count
        if high_count is not None:
            self.high_count = high_count
        if medium_count is not None:
            self.medium_count = medium_count
        if low_count is not None:
            self.low_count = low_count
        if negligible_count is not None:
            self.negligible_count = negligible_count
        if unknown_count is not None:
            self.unknown_count = unknown_count

    @property
    def critical_count(self):
        """Gets the critical_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Critical.  # noqa: E501

        :return: The critical_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._critical_count

    @critical_count.setter
    def critical_count(self, critical_count):
        """Sets the critical_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Critical.  # noqa: E501

        :param critical_count: The critical_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._critical_count = critical_count

    @property
    def defcon1_count(self):
        """Gets the defcon1_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Defcon1.  # noqa: E501

        :return: The defcon1_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._defcon1_count

    @defcon1_count.setter
    def defcon1_count(self, defcon1_count):
        """Sets the defcon1_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Defcon1.  # noqa: E501

        :param defcon1_count: The defcon1_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._defcon1_count = defcon1_count

    @property
    def high_count(self):
        """Gets the high_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level High.  # noqa: E501

        :return: The high_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._high_count

    @high_count.setter
    def high_count(self, high_count):
        """Sets the high_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level High.  # noqa: E501

        :param high_count: The high_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._high_count = high_count

    @property
    def medium_count(self):
        """Gets the medium_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Medium.  # noqa: E501

        :return: The medium_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._medium_count

    @medium_count.setter
    def medium_count(self, medium_count):
        """Sets the medium_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Medium.  # noqa: E501

        :param medium_count: The medium_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._medium_count = medium_count

    @property
    def low_count(self):
        """Gets the low_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Low.  # noqa: E501

        :return: The low_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._low_count

    @low_count.setter
    def low_count(self, low_count):
        """Sets the low_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Low.  # noqa: E501

        :param low_count: The low_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._low_count = low_count

    @property
    def negligible_count(self):
        """Gets the negligible_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Negligible.  # noqa: E501

        :return: The negligible_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._negligible_count

    @negligible_count.setter
    def negligible_count(self, negligible_count):
        """Sets the negligible_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Negligible.  # noqa: E501

        :param negligible_count: The negligible_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._negligible_count = negligible_count

    @property
    def unknown_count(self):
        """Gets the unknown_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501

        Threshold for vulnerabilities of level Unknown.  # noqa: E501

        :return: The unknown_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :rtype: int
        """
        return self._unknown_count

    @unknown_count.setter
    def unknown_count(self, unknown_count):
        """Sets the unknown_count of this ContainerControlVulnerabilityThreshold.

        Threshold for vulnerabilities of level Unknown.  # noqa: E501

        :param unknown_count: The unknown_count of this ContainerControlVulnerabilityThreshold.  # noqa: E501
        :type: int
        """

        self._unknown_count = unknown_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContainerControlVulnerabilityThreshold, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerControlVulnerabilityThreshold):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

