# coding: utf-8

"""
    Trend Micro Deep Security API

    Copyright 2018 - 2019 Trend Micro Incorporated.<br/>Get protected, stay secured, and keep informed with Trend Micro Deep Security's new RESTful API. Access system data and manage security configurations to automate your security workflows and integrate Deep Security into your CI/CD pipeline.  # noqa: E501

    OpenAPI spec version: 12.5.349
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RegistryScanner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'username': 'str',
        'password': 'str',
        'url': 'str',
        'last_scan_report_received_date': 'int',
        'last_webhook_ping_status': 'str',
        'id': 'int'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'username': 'username',
        'password': 'password',
        'url': 'url',
        'last_scan_report_received_date': 'lastScanReportReceivedDate',
        'last_webhook_ping_status': 'lastWebhookPingStatus',
        'id': 'ID'
    }

    def __init__(self, name=None, description=None, username=None, password=None, url=None, last_scan_report_received_date=None, last_webhook_ping_status=None, id=None):  # noqa: E501
        """RegistryScanner - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._username = None
        self._password = None
        self._url = None
        self._last_scan_report_received_date = None
        self._last_webhook_ping_status = None
        self._id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if username is not None:
            self.username = username
        if password is not None:
            self.password = password
        if url is not None:
            self.url = url
        if last_scan_report_received_date is not None:
            self.last_scan_report_received_date = last_scan_report_received_date
        if last_webhook_ping_status is not None:
            self.last_webhook_ping_status = last_webhook_ping_status
        if id is not None:
            self.id = id

    @property
    def name(self):
        """Gets the name of this RegistryScanner.  # noqa: E501

        Name of the registry scanner.  # noqa: E501

        :return: The name of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegistryScanner.

        Name of the registry scanner.  # noqa: E501

        :param name: The name of this RegistryScanner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this RegistryScanner.  # noqa: E501

        Description of the registry scanner.  # noqa: E501

        :return: The description of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RegistryScanner.

        Description of the registry scanner.  # noqa: E501

        :param description: The description of this RegistryScanner.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def username(self):
        """Gets the username of this RegistryScanner.  # noqa: E501

        Username used to log in to the registry scanner.  # noqa: E501

        :return: The username of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegistryScanner.

        Username used to log in to the registry scanner.  # noqa: E501

        :param username: The username of this RegistryScanner.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this RegistryScanner.  # noqa: E501

        Password used to log in to the registry scanner.  # noqa: E501

        :return: The password of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistryScanner.

        Password used to log in to the registry scanner.  # noqa: E501

        :param password: The password of this RegistryScanner.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def url(self):
        """Gets the url of this RegistryScanner.  # noqa: E501

        URL of the registry scanner.  # noqa: E501

        :return: The url of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RegistryScanner.

        URL of the registry scanner.  # noqa: E501

        :param url: The url of this RegistryScanner.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def last_scan_report_received_date(self):
        """Gets the last_scan_report_received_date of this RegistryScanner.  # noqa: E501

        The date when a report was last received from the registry scanner.  # noqa: E501

        :return: The last_scan_report_received_date of this RegistryScanner.  # noqa: E501
        :rtype: int
        """
        return self._last_scan_report_received_date

    @last_scan_report_received_date.setter
    def last_scan_report_received_date(self, last_scan_report_received_date):
        """Sets the last_scan_report_received_date of this RegistryScanner.

        The date when a report was last received from the registry scanner.  # noqa: E501

        :param last_scan_report_received_date: The last_scan_report_received_date of this RegistryScanner.  # noqa: E501
        :type: int
        """

        self._last_scan_report_received_date = last_scan_report_received_date

    @property
    def last_webhook_ping_status(self):
        """Gets the last_webhook_ping_status of this RegistryScanner.  # noqa: E501

        The connection status between DSM and the registry scanner.  # noqa: E501

        :return: The last_webhook_ping_status of this RegistryScanner.  # noqa: E501
        :rtype: str
        """
        return self._last_webhook_ping_status

    @last_webhook_ping_status.setter
    def last_webhook_ping_status(self, last_webhook_ping_status):
        """Sets the last_webhook_ping_status of this RegistryScanner.

        The connection status between DSM and the registry scanner.  # noqa: E501

        :param last_webhook_ping_status: The last_webhook_ping_status of this RegistryScanner.  # noqa: E501
        :type: str
        """
        allowed_values = ["success", "checking", "general-failure", "authentication-failure", "authorization-failure", "incorrect-url", "cannot-reach-server", "timeout", "connection-refused", "invalid-scanner-cert", "invalid-dsm-cert", "moved-url", "incompatible-api-version", "service-unavailable"]  # noqa: E501
        if last_webhook_ping_status not in allowed_values:
            raise ValueError(
                "Invalid value for `last_webhook_ping_status` ({0}), must be one of {1}"  # noqa: E501
                .format(last_webhook_ping_status, allowed_values)
            )

        self._last_webhook_ping_status = last_webhook_ping_status

    @property
    def id(self):
        """Gets the id of this RegistryScanner.  # noqa: E501

        ID of the registry scanner.  # noqa: E501

        :return: The id of this RegistryScanner.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RegistryScanner.

        ID of the registry scanner.  # noqa: E501

        :param id: The id of this RegistryScanner.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistryScanner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistryScanner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

